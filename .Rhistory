(c11.sample1 <- sort(c11.f[sample(1:length(c11.f), size=5)]))
set.seed(296)
(c11.sample2 <- sort(c11.f[sample(1:length(c11.f), size=5)]))
c12 <- seq(from=64,to=89)
rm_c12 <- c(72,73,74,84,85)
c12.f <- c12[!(c12 %in% rm_c12)]
set.seed(100)
(c12.sample1 <- sort(c12.f[sample(1:length(c12.f), size=5)]))
set.seed(296)
(c12.sample2 <- sort(c12.f[sample(1:length(c12.f), size=5)]))
c13 <- seq(from=94,to=161)
rm_c13 <- c(seq(124:129),148,149)
c13.f <- c13[!(c13 %in% rm_c13)]
set.seed(100)
(c13.sample1 <- sort(c13.f[sample(1:length(c13.f), size=5)]))
set.seed(296)
(c13.sample2 <- sort(c13.f[sample(1:length(c13.f), size=5)]))
c14 <- seq(from=175,to=222)
set.seed(100)
(c14.sample1 <- sort(c14[sample(1:length(c14), size=5)]))
set.seed(296)
(c14.sample2 <- sort(c14[sample(1:length(c14), size=5)]))
c15 <- seq(from=228,to=305)
rm_c15 <- c(261,267,268,270,271,301)
c15.f <- c15[!(c15 %in% rm_c15)]
set.seed(100)
(c15.sample1 <- sort(c15.f[sample(1:length(c15.f), size=5)]))
set.seed(296)
(c15.sample2 <- sort(c15.f[sample(1:length(c15.f), size=5)]))
c16 <- seq(from=310,to=392)
set.seed(100)
(c16.sample1 <- sort(c16[sample(1:length(c16), size=5)]))
set.seed(296)
(c16.sample2 <- sort(c16[sample(1:length(c16), size=5)]))
c17 <- seq(from=397,to=451)
set.seed(100)
(c17.sample1 <- sort(c17[sample(1:length(c17), size=5)]))
set.seed(296)
(c17.sample2 <- sort(c17[sample(1:length(c17), size=5)]))
c18 <- seq(from=457,to=513)
rm_c18 <- c(461,463,483,484,485,486,491,504,505)
c18.f <- c18[!(c18 %in% rm_c18)]
set.seed(100)
(c18.sample1 <- sort(c18.f[sample(1:length(c18.f), size=5)]))
set.seed(296)
(c18.sample2 <- sort(c18.f[sample(1:length(c18.f), size=5)]))
c19 <- seq(from=531,to=600)
set.seed(100)
(c19.sample1 <- sort(c19[sample(1:length(c19), size=5)]))
set.seed(296)
(c19.sample2 <- sort(c19[sample(1:length(c19), size=5)]))
c20 <- seq(from=1,to=140)
rm_c20 <- c(8,61,62,68,90,91)
c20.f <- c20[!(c20 %in% rm_c20)]
set.seed(100)
(c20.sample1 <- sort(c20.f[sample(1:length(c20.f), size=5)]))
set.seed(296)
(c20.sample2 <- sort(c20.f[sample(1:length(c20.f), size=5)]))
c1 <- seq(1:30)
rm_c1 <- c(10,11,12,20)
c1.f <- c1[!(c1 %in% rm_c1)]
set.seed(100)
(c1.sample1 <- sort(c1.f[sample(1:length(c1.f), 10)]))
set.seed(296)
(c1.sample2 <- sort(c1.f[sample(1:length(c1.f), 10)]))
c2 <- seq(from=35,to=75)
rm_c2 <- c(39,40,58)
c2.f <- c2[!(c2 %in% rm_c2)]
set.seed(100)
(c2.sample1 <- sort(c2.f[sample(1:length(c2.f), size=10)]))
set.seed(296)
(c2.sample2 <- sort(c2.f[sample(1:length(c2.f), size=10)]))
c3 <- seq(from=76,to=142)
rm_c3 <- seq(from=103,to=106)
c3.f <- c3[!(c3 %in% rm_c3)]
set.seed(100)
(c3.sample1 <- sort(c3.f[sample(1:length(c3.f), size=10)]))
set.seed(296)
(c3.sample2 <- sort(c3.f[sample(1:length(c3.f), size=10)]))
c4 <- seq(from=150,to=235)
rm_c4 <- c(seq(from=186,to=189),202,204,205,207,213)
c4.f <- c4[!(c4 %in% rm_c4)]
set.seed(100)
(c4.sample1 <- sort(c4.f[sample(1:length(c4.f), size=10)]))
set.seed(296)
(c4.sample2 <- sort(c4.f[sample(1:length(c4.f), size=10)]))
c5 <- seq(from=236,to=289)
rm_c5 <- seq(from=240,to=243)
c5.f <- c5[!(c5 %in% rm_c5)]
set.seed(100)
(c5.sample1 <- sort(c5.f[sample(1:length(c5.f), size=10)]))
set.seed(296)
(c5.sample2 <- sort(c5.f[sample(1:length(c5.f), size=10)]))
c6 <- seq(from=290,to=365)
set.seed(100)
(c6.sample1 <- sort(c6[sample(1:length(c6), size=10)]))
set.seed(296)
(c6.sample2 <- sort(c6[sample(1:length(c6), size=10)]))
c7 <- seq(from=366,to=516)
rm_c7 <- c(382,383,410,411,440,441,442,483,490,513,514)
c7.f <- c7[!(c7 %in% rm_c7)]
set.seed(100)
(c7.sample1 <- sort(c7.f[sample(1:length(c7.f), size=10)]))
set.seed(296)
(c7.sample2 <- sort(c7.f[sample(1:length(c7.f), size=10)]))
c8 <- seq(from=524,to=559)
set.seed(100)
(c8.sample1 <- sort(c8[sample(1:length(c8), size=10)]))
set.seed(296)
(c8.sample2 <- sort(c8[sample(1:length(c8), size=10)]))
c9 <- seq(from=559,to=596)
set.seed(100)
(c9.sample1 <- sort(c9[sample(1:length(c9), size=10)]))
set.seed(296)
(c9.sample2 <- sort(c9[sample(1:length(c9), size=10)]))
c10 <- seq(from=1,to=141)
rm_c10 <- c(32,33,34,63,64,128,129,136,137)
c10.f <- c10[!(c10 %in% rm_c10)]
set.seed(100)
(c10.sample1 <- sort(c10.f[sample(1:length(c10.f), size=10)]))
set.seed(296)
(c10.sample2 <- sort(c10.f[sample(1:length(c10.f), size=10)]))
c11 <- seq(from=1,to=53)
rm_c11 <- c(42)
c11.f <- c11[!(c11 %in% rm_c11)]
set.seed(100)
(c11.sample1 <- sort(c11.f[sample(1:length(c11.f), size=10)]))
set.seed(296)
(c11.sample2 <- sort(c11.f[sample(1:length(c11.f), size=10)]))
c12 <- seq(from=64,to=89)
rm_c12 <- c(72,73,74,84,85)
c12.f <- c12[!(c12 %in% rm_c12)]
set.seed(100)
(c12.sample1 <- sort(c12.f[sample(1:length(c12.f), size=10)]))
set.seed(296)
(c12.sample2 <- sort(c12.f[sample(1:length(c12.f), size=10)]))
c13 <- seq(from=94,to=161)
rm_c13 <- c(seq(124:129),148,149)
c13.f <- c13[!(c13 %in% rm_c13)]
set.seed(100)
(c13.sample1 <- sort(c13.f[sample(1:length(c13.f), size=10)]))
set.seed(296)
(c13.sample2 <- sort(c13.f[sample(1:length(c13.f), size=10)]))
c14 <- seq(from=175,to=222)
set.seed(100)
(c14.sample1 <- sort(c14[sample(1:length(c14), size=10)]))
set.seed(296)
(c14.sample2 <- sort(c14[sample(1:length(c14), size=10)]))
c15 <- seq(from=228,to=305)
rm_c15 <- c(261,267,268,270,271,301)
c15.f <- c15[!(c15 %in% rm_c15)]
set.seed(100)
(c15.sample1 <- sort(c15.f[sample(1:length(c15.f), size=10)]))
set.seed(296)
(c15.sample2 <- sort(c15.f[sample(1:length(c15.f), size=10)]))
c16 <- seq(from=310,to=392)
set.seed(100)
(c16.sample1 <- sort(c16[sample(1:length(c16), size=10)]))
set.seed(296)
(c16.sample2 <- sort(c16[sample(1:length(c16), size=10)]))
c17 <- seq(from=397,to=451)
set.seed(100)
(c17.sample1 <- sort(c17[sample(1:length(c17), size=10)]))
set.seed(296)
(c17.sample2 <- sort(c17[sample(1:length(c17), size=10)]))
c18 <- seq(from=457,to=513)
rm_c18 <- c(461,463,483,484,485,486,491,504,505)
c18.f <- c18[!(c18 %in% rm_c18)]
set.seed(100)
(c18.sample1 <- sort(c18.f[sample(1:length(c18.f), size=10)]))
set.seed(296)
(c18.sample2 <- sort(c18.f[sample(1:length(c18.f), size=10)]))
c19 <- seq(from=531,to=600)
set.seed(100)
(c19.sample1 <- sort(c19[sample(1:length(c19), size=10)]))
set.seed(296)
(c19.sample2 <- sort(c19[sample(1:length(c19), size=10)]))
c20 <- seq(from=1,to=140)
rm_c20 <- c(8,61,62,68,90,91)
c20.f <- c20[!(c20 %in% rm_c20)]
set.seed(100)
(c20.sample1 <- sort(c20.f[sample(1:length(c20.f), size=10)]))
set.seed(296)
(c20.sample2 <- sort(c20.f[sample(1:length(c20.f), size=10)]))
c14 <- seq(from=175,to=222)
set.seed(100)
(c14.sample1 <- sort(c14[sample(1:length(c14), size=10)]))
set.seed(296)
(c14.sample2 <- sort(c14[sample(1:length(c14), size=10)]))
167+17
(12*167)/(2*165)
(22*167)/(2*165)
375*0.072
375-27
1550*0.049
1550-76
c11 <- seq(from=1,to=53)
rm_c11 <- c(42)
c11.f <- c11[!(c11 %in% rm_c11)]
length(c11.f)
c13 <- seq(from=94,to=161)
rm_c13 <- c(seq(124:129),148,149)
c13.f <- c13[!(c13 %in% rm_c13)]
length(c13.f)
c14 <- seq(from=175,to=222)
legnth(c14)
length(c14)
c15 <- seq(from=228,to=305)
rm_c15 <- c(261,267,268,270,271,301)
c15.f <- c15[!(c15 %in% rm_c15)]
length(c15.f)
c16 <- seq(from=310,to=392)
length(c16)
1-exp(3.54*15*0.00001+1.35*5*0.00001)
1-exp(-(3.54*15*0.00001+1.35*5*0.00001))
128/2
128-88
exp(log(6.89)+1.96*sqrt(1/49+1/47+1/31+1/205))
47+205
49+31
(-1411.65)/( -7028.2493)
(-1308.94)/(-7028.2493)
(-2127.49)/(-13346.9993)
(-0.01)/(-0.06934245660881175)
help(trim)
# source the functions provided in part 1
source("https://github.com/xuyiqing/lalonde/blob/main/tutorial/functions.R?raw=TRUE")
help("trim")
# File for constructing baselines for Lalonde-psid data
# Consider the strong baseline below:
# ideally each ML model used should be tuned first
# 1. IPW (using causal forest)
# 3. AIPW using GRF
# source the functions provided in the lalonde paper
source("https://github.com/xuyiqing/lalonde/blob/main/tutorial/functions.R?raw=TRUE")
library(grf)
setwd("/Users/manqingliu/Dropbox/Harvard/Research/DAGawareTransformer_NeurIPS")
ldw_psid_train <- read.csv("data/lalonde/ldw_psid/lalonde_psid_train.csv")
ldw_psid_val <- read.csv("data/lalonde/ldw_psid/lalonde_psid_val.csv")
ldw_psid_test <- read.csv("data/lalonde/ldw_psid/lalonde_psid_test.csv")
ldw_cps_train <- read.csv("data/lalonde/ldw_cps/lalonde_cps_train.csv")
ldw_cps_val <- read.csv("data/lalonde/ldw_cps/lalonde_cps_val.csv")
# RMSE function
# Function to calculate RMSE
rmse <- function(predicted, actual) {
sqrt((predicted - actual)^2)
}
# define variables
Y <- "y"
treat <- "t"
covar <- c("age", "education", "black", "hispanic", "married",
"nodegree", "re74", "re75", "u74", "u75")
# get AUC of PS using GRF
ps_model <- probability_forest(X = ldw_psid_train[, covar, drop = FALSE], Y = as.factor(ldw_psid_train[, treat]), seed = 123456)
ps <- predict(ps_model, ldw_psid_test[, covar, drop = FALSE])$predictions[, 2]
ps
View(ldw_psid_test)
View(ldw_psid_test)
typeof(ps)
library(pROC)
install.packages("pROC")
library(pROC)
roc_obj <- roc(ldw_psid_test$t, ps)
auc_value <- auc(roc_obj)
print(paste("The AUC is:", auc_value))
ipw_evaluate(ldw_psid_train, ldw_psid_test, Y, treat, covar)
ipw_evaluate <- function(train_data, test_data, Y, treat, covar,true_ate=1794.34, seed=123456) {
set.seed(seed)
# Estimate the propensity scores using a probability forest on the training data
ps_model <- probability_forest(X = train_data[, covar, drop = FALSE], Y = as.factor(train_data[, treat]), seed = 123456)
ps <- predict(ps_model, test_data[, covar, drop = FALSE])$predictions[, 2]
# Create the formula for the outcome regression
fml <- as.formula(paste(Y, "~", treat))
# Calculate weights for ATE on the test data
weights <- ifelse(test_data[, treat] == 1, 1 / ps, 1 / (1 - ps))
# Fit the weighted linear model on the test data
out <- summary(lm_robust(fml, data = test_data, weights = weights, se_type = "stata"))$coefficients[treat, c(1, 2, 5, 6)]
ate <- out[1]
rmse_ate <- rmse(ate, true_ate)
return(c(ate = ate, rmse_ate = rmse_ate))
}
ipw_evaluate(ldw_psid_train, ldw_psid_test, Y, treat, covar)
ldw_psid_train <- read.csv("data/lalonde/ldw_psid/lalonde_psid_train.csv")
ldw_psid_val <- read.csv("data/lalonde/ldw_psid/lalonde_psid_val.csv")
ldw_psid_test <- read.csv("data/lalonde/ldw_psid/lalonde_psid_test.csv")
ldw_cps_train <- read.csv("data/lalonde/ldw_cps/lalonde_cps_train.csv")
ldw_cps_val <- read.csv("data/lalonde/ldw_cps/lalonde_cps_val.csv")
# RMSE function
# Function to calculate RMSE
rmse <- function(predicted, actual) {
sqrt((predicted - actual)^2)
}
# define variables
Y <- "y"
treat <- "t"
covar <- c("age", "education", "black", "hispanic", "married",
"nodegree", "re74", "re75", "u74", "u75")
# get AUC of PS using GRF
ps_model <- probability_forest(X = ldw_psid_train[, covar, drop = FALSE], Y = as.factor(ldw_psid_train[, treat]), seed = 123456)
ps <- predict(ps_model, ldw_psid_test[, covar, drop = FALSE])$predictions[, 2]
roc_obj <- roc(ldw_psid_test$t, ps)
auc_value <- auc(roc_obj)
print(paste("The AUC is:", auc_value))
# IPW
ipw_evaluate <- function(train_data, test_data, Y, treat, covar,true_ate=1794.34, seed=123456) {
set.seed(seed)
# Estimate the propensity scores using a probability forest on the training data
ps_model <- probability_forest(X = train_data[, covar, drop = FALSE], Y = as.factor(train_data[, treat]), seed = 123456)
ps <- predict(ps_model, test_data[, covar, drop = FALSE])$predictions[, 2]
# Create the formula for the outcome regression
fml <- as.formula(paste(Y, "~", treat))
# Calculate weights for ATE on the test data
weights <- ifelse(test_data[, treat] == 1, 1 / ps, 1 / (1 - ps))
# Fit the weighted linear model on the test data
out <- summary(lm_robust(fml, data = test_data, weights = weights, se_type = "stata"))$coefficients[treat, c(1, 2, 5, 6)]
ate <- out[1]
rmse_ate <- rmse(ate, true_ate)
return(c(ate = ate, rmse_ate = rmse_ate))
}
ipw_evaluate(ldw_psid_train, ldw_psid_test, Y, treat, covar)
aipw.grf_evaluate <- function(train_data, test_data, Y, treat, covar, true_ate=1794.34, seed=123456) {
set.seed(seed)
calculate_ite <- function(train_data, test_data, Y, treat, covar) {
for (var in c(Y, treat, covar)) {
train_data[, var] <- as.vector(train_data[, var])
test_data[, var] <- as.vector(test_data[, var])
}
c.forest <- causal_forest(X = train_data[, covar, drop = FALSE], Y = train_data[, Y],
W = train_data[, treat],
tune.parameters = "all",
seed = seed)
X.test = test_data[, covar, drop=FALSE]
ite_pred <- predict(c.forest, X.test,  method="AIPW")
return(ite_pred[,1])
}
ite <- calculate_ite(train_data, test_data, Y, treat, covar)
ate <- mean(ite)
rmse_ate <- rmse(ate, true_ate)
return(c(ate, rmse_ate))
}
# execute all estimators
estimate_all_bl <- function(train_data, test_data, Y, treat, covar,
methods=c("IPW (GRF)","AIPW (GRF)")) {
results <- as.data.frame(matrix(NA, length(methods), 2))
rownames(results) <- methods
colnames(results) <- c("Estimate", "RMSE")
m <- 1
if ("IPW(GRF)" %in% methods) {
results[m, ] <- ipw_evaluate(train_data, test_data, Y, treat, covar)
m <- m + 1
}
if ("AIPW(GRF)" %in% methods) {
results[m, ] <-aipw.grf_evaluate(train_data, test_data, Y, treat, covar)
}
return(results)
}
estimate_all_bl(ldw_psid_train, ldw_psid_test, Y, treat, covar)
# Initialize storage for results
all_results <- list()
# Loop through sample0 to sample49
for (i in 0:49) {
train_data <- read.csv(paste0("data/lalonde/ldw_psid/sample", i, "/train_data_", i, ".csv"))
test_data <- read.csv(paste0("data/lalonde/ldw_psid/sample", i, "/test_data_", i, ".csv"))
result <- estimate_all_bl(train_data, test_data, Y, treat, covar)
all_results[[i + 1]] <- result
}
# Initialize vectors to store ATE estimates
ate_estimates_ipw <- numeric(50)
ate_estimates_aipw <- numeric(50)
# Extract ATE estimates
for (i in 1:50) {
ate_estimates_ipw[i] <- all_results[[i]][1, 1]  # First row, first column for IPW
ate_estimates_aipw[i] <- all_results[[i]][2, 1] # Second row, first column for AIPW
}
# Calculate quartiles for confidence intervals
ci_lower_ipw <- quantile(ate_estimates_ipw, 0.025)
# IPW
ipw_evaluate <- function(train_data, test_data, Y, treat, covar,true_ate=1794.34, seed=123456) {
set.seed(seed)
# Estimate the propensity scores using a probability forest on the training data
ps_model <- probability_forest(X = train_data[, covar, drop = FALSE], Y = as.factor(train_data[, treat]), seed = 123456)
ps <- predict(ps_model, test_data[, covar, drop = FALSE])$predictions[, 2]
# Create the formula for the outcome regression
fml <- as.formula(paste(Y, "~", treat))
# Calculate weights for ATE on the test data
weights <- ifelse(test_data[, treat] == 1, 1 / ps, 1 / (1 - ps))
# Fit the weighted linear model on the test data
out <- summary(lm_robust(fml, data = test_data, weights = weights, se_type = "stata"))$coefficients[treat, c(1, 2, 5, 6)]
ate <- out[1]
rmse_ate <- rmse(ate, true_ate)
return(c(ate = ate, rmse_ate = rmse_ate))
}
aipw.grf_evaluate <- function(train_data, test_data, Y, treat, covar, true_ate=1794.34, seed=123456) {
set.seed(seed)
calculate_ite <- function(train_data, test_data, Y, treat, covar) {
for (var in c(Y, treat, covar)) {
train_data[, var] <- as.vector(train_data[, var])
test_data[, var] <- as.vector(test_data[, var])
}
c.forest <- causal_forest(X = train_data[, covar, drop = FALSE], Y = train_data[, Y],
W = train_data[, treat],
tune.parameters = "all",
seed = seed)
X.test = test_data[, covar, drop=FALSE]
ite_pred <- predict(c.forest, X.test,  method="AIPW")
return(ite_pred[,1])
}
ite <- calculate_ite(train_data, test_data, Y, treat, covar)
ate <- mean(ite)
rmse_ate <- rmse(ate, true_ate)
return(c(ate, rmse_ate))
}
estimate_all_bl <- function(train_data, test_data, Y, treat, covar,
methods=c("IPW (GRF)","AIPW (GRF)")) {
results <- as.data.frame(matrix(NA, length(methods), 2))
rownames(results) <- methods
colnames(results) <- c("Estimate", "RMSE")
m <- 1
if ("IPW(GRF)" %in% methods) {
results[m, ] <- ipw_evaluate(train_data, test_data, Y, treat, covar)
m <- m + 1
}
if ("AIPW(GRF)" %in% methods) {
results[m, ] <-aipw.grf_evaluate(train_data, test_data, Y, treat, covar)
}
return(results)
}
estimate_all_bl(ldw_psid_train, ldw_psid_test, Y, treat, covar)
# Initialize storage for results
all_results <- list()
# Loop through sample0 to sample49
for (i in 0:49) {
train_data <- read.csv(paste0("data/lalonde/ldw_psid/sample", i, "/train_data_", i, ".csv"))
test_data <- read.csv(paste0("data/lalonde/ldw_psid/sample", i, "/test_data_", i, ".csv"))
result <- estimate_all_bl(train_data, test_data, Y, treat, covar)
all_results[[i + 1]] <- result
}
setwd("/Users/manqingliu/Dropbox/Harvard/Research/DAGawareTransformer_NeurIPS")
ldw_psid_train <- read.csv("data/lalonde/ldw_psid/lalonde_psid_train.csv")
ldw_psid_val <- read.csv("data/lalonde/ldw_psid/lalonde_psid_val.csv")
ldw_psid_test <- read.csv("data/lalonde/ldw_psid/lalonde_psid_test.csv")
ldw_cps_train <- read.csv("data/lalonde/ldw_cps/lalonde_cps_train.csv")
ldw_cps_val <- read.csv("data/lalonde/ldw_cps/lalonde_cps_val.csv")
# RMSE function
# Function to calculate RMSE
rmse <- function(predicted, actual) {
sqrt((predicted - actual)^2)
}
# define variables
Y <- "y"
treat <- "t"
covar <- c("age", "education", "black", "hispanic", "married",
"nodegree", "re74", "re75", "u74", "u75")
# get AUC of PS using GRF
#ps_model <- probability_forest(X = ldw_psid_train[, covar, drop = FALSE], Y = as.factor(ldw_psid_train[, treat]), seed = 123456)
#ps <- predict(ps_model, ldw_psid_test[, covar, drop = FALSE])$predictions[, 2]
#roc_obj <- roc(ldw_psid_test$t, ps)
#auc_value <- auc(roc_obj)
#print(paste("The AUC is:", auc_value))
# IPW
ipw_evaluate <- function(train_data, test_data, Y, treat, covar,true_ate=1794.34, seed=123456) {
set.seed(seed)
# Estimate the propensity scores using a probability forest on the training data
ps_model <- probability_forest(X = train_data[, covar, drop = FALSE], Y = as.factor(train_data[, treat]), seed = 123456)
ps <- predict(ps_model, test_data[, covar, drop = FALSE])$predictions[, 2]
# Create the formula for the outcome regression
fml <- as.formula(paste(Y, "~", treat))
# Calculate weights for ATE on the test data
weights <- ifelse(test_data[, treat] == 1, 1 / ps, 1 / (1 - ps))
# Fit the weighted linear model on the test data
out <- summary(lm_robust(fml, data = test_data, weights = weights, se_type = "stata"))$coefficients[treat, c(1, 2, 5, 6)]
ate <- out[1]
rmse_ate <- rmse(ate, true_ate)
return(c(ate = ate, rmse_ate = rmse_ate))
}
aipw.grf_evaluate <- function(train_data, test_data, Y, treat, covar, true_ate=1794.34, seed=123456) {
set.seed(seed)
calculate_ite <- function(train_data, test_data, Y, treat, covar) {
for (var in c(Y, treat, covar)) {
train_data[, var] <- as.vector(train_data[, var])
test_data[, var] <- as.vector(test_data[, var])
}
c.forest <- causal_forest(X = train_data[, covar, drop = FALSE], Y = train_data[, Y],
W = train_data[, treat],
tune.parameters = "all",
seed = seed)
X.test = test_data[, covar, drop=FALSE]
ite_pred <- predict(c.forest, X.test,  method="AIPW")
return(ite_pred[,1])
}
ite <- calculate_ite(train_data, test_data, Y, treat, covar)
ate <- mean(ite)
rmse_ate <- rmse(ate, true_ate)
return(c(ate, rmse_ate))
}
# execute all estimators
estimate_all_bl <- function(train_data, test_data, Y, treat, covar,
methods=c("IPW (GRF)","AIPW (GRF)")) {
results <- as.data.frame(matrix(NA, length(methods), 2))
rownames(results) <- methods
colnames(results) <- c("Estimate", "RMSE")
m <- 1
if ("IPW(GRF)" %in% methods) {
results[m, ] <- ipw_evaluate(train_data, test_data, Y, treat, covar)
m <- m + 1
}
if ("AIPW(GRF)" %in% methods) {
results[m, ] <-aipw.grf_evaluate(train_data, test_data, Y, treat, covar)
}
return(results)
}
estimate_all_bl(ldw_psid_train, ldw_psid_test, Y, treat, covar)
